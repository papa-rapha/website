[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Raphaël",
    "section": "",
    "text": "This is an attempt at blogging - a lil’ bit, about everything and nothing, but mostly stats, R and Python.\nAfter 7 years at EDF R&D as a research engineer in data science, specialized in forecasting for energy markets and energy networks, I joined Talend as a lead data scientist to develop ML tools and features in Talend’s product. I’m about to join a new company and start a new position. Stay tuned.\nI also enjoy teaching when I can. I did teach in the past at Ensai, CEPE, Dauphine University, Nantes Université."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Raphaël",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nMar 30, 2023\n\n\nWhat was the best Rivals manager team possible? A knapsack problem.\n\n\nRaphaël\n\n\n\n\nMar 24, 2023\n\n\nWelcome To My Blog ! ‘R avancé & introduction à Git’\n\n\nRaphaël\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/03-2023-velogames-knapsack/index.html",
    "href": "posts/03-2023-velogames-knapsack/index.html",
    "title": "What was the best Rivals manager team possible? A knapsack problem.",
    "section": "",
    "text": "Knapsack problem\nSo, to summarize, our problem can be formulated as follow:\n\nGiven a total number of credit of 225,\nAnd a constraint on the number of team members which has to be between 30 to 35\n\nHow can we maximize the number of points collected at the end of the year?\nI’m not very familiar with classical optimization problems, but it turns out that this is exactly the formulation of a Knapsack problem. The original formulation goes as follow:\n\nGiven a set of items, each with a weight and a value, determine which items to include in the collection so that the total weight is less than or equal to a given limit and the total value is as large as possible.\n\nReplace the collection by your squad, an item by a rider, the weight by the cotation of the rider, and the value by the total of points scored at the end of the season, and you almost got your Rivals’ challenge! We’ll have to add the two constraints over the ‘top league’ riders and the fact that the total number of riders is constrained too.\n\n\nCollecting data\nLet’s begin by grabbing some data for our experiment. The rivals manager website is quite old and is not necessarily at the state of the art, and there is no API available to perform the request. So let’s do a little bit of web scrapping. We’ll use rvest to do so. We’ll also use dplyr and tidyr as utility packages for data handling, and purrr for functional oriented programming functions.\nFirst function to read the riders’ results.\n\n\nScrap web page for riders’ results\n#' read results table from rivals manager website\n#' \n#' @param year Year of interest\nread_riders_results <- function(year) {\n  url <- paste0(\"http://velo-club.com/historique.php?choix=Classement&annee=\", year)\n  read_html(url) |>\n    html_element(\"table\") |>\n    html_table() |>\n    select(-Pays, -Place) |>\n    rename(Name = Nom, Cost = Valeurs)\n}\n\n\nSecond function to read the riders’ original cotations. It’s a bit redundant but riders who didn’t score any point have to be found in this table as they do not appear in the yearly results tables above (only riders with at least 1 point do).\n\n\nScrap riders’ cotation\n#' read values table from rivals manager website\n#' \n#' @param year Year of interest\nread_riders_values <- function(year) {\n  url <- paste0(\"http://velo-club.com/historique.php?choix=Cotation&annee=\", year)\n  read_html(url) |>\n    html_element(\"table\") |>\n    html_table() |>\n    select(-Pays) |>\n    rename(Name = Nom, Team = Equipe, Cost = Valeurs)\n}\n\n\nThird function is necessary to grab actual results from human players:\n\n\nCollect human performances\n#' read scores from human players\n#' \n#' @param year Year of interest\nread_team_scores <- function(year) {\n  url <- paste0(\"http://velo-club.com/historique.php?choix=Classement&annee=\",\n                year,\n                \"&lstClassement=Managers\")\n  read_html(url) |>\n    html_element(\"table\") |>\n    html_table() |>\n    select(-Pays, -Place) |>\n    rename(Name = Nom)\n}\n\n\nLet’s now request the data for the period 2013-2022 for which we have historical data. We’ll join the results and the values table to make sure we have all the riders available at the beginning of every season.\n\n\nBind riders data for each year altogether\nmap(2013:2022, function(x) {\n  riders_results <- read_riders_results(x)\n  riders_values <- read_riders_values(x)\n  left_join(riders_values, riders_results, by = c(\"Name\", \"Cost\"))\n}) |> setNames(2013:2022) |> \n  bind_rows(.id = \"Year\") -> data_riders\n\n\nLet’s make sure we flag properly the ‘top league’ for every year in the history. Sadly, it is hard to find valid info about who was in the top ligue in the past. I tried to collect all the infortion I could on the forum, but it’s not easy to find. I think I managed to find every member of the top league, but couldn’t find the maximum cost for top league riders you were able to pick for years 2013, and 2015 to 2019. There was no constraint at all in 2020. Since it seems the cotation strategy was the same for the 2013-2019 period, I’ll make the hypothesis that the limit for top league riders was identical to the one for the year 2014, i.e. 93.\n\n\nAdd Top League and compute performance ratio (Points over Cost)\ntop_league <- list(\n  \"2013\" = c(\"Joaquin RODRIGUEZ\", \"Alberto CONTADOR\", \"Philippe GILBERT\", \n             \"Peter SAGAN\", \"Bradley WIGGINS\", \"Vincenzo NIBALI\", \"Alejandro VALVERDE\", \n             \"Edvald BOASSON HAGEN\", \"Cadel EVANS\", \"Samuel SANCHEZ\", \"Tom BOONEN\", \n             \"Fabian CANCELLARA\", \"Chris FROOME\", \"Thomas VOECKLER\", \"John DEGENKOLB\", \n             \"Andre GREIPEL\", \"Andy SCHLECK\", \"Mark CAVENDISH\", \"Rui Alberto COSTA\", \n             \"Simon GERRANS\", \"Robert GESINK\", \"Ryder HESJEDAL\", \"Tony MARTIN\", \n             \"Rigoberto URAN\"),\n  \"2014\" = c(\"Peter SAGAN\", \"Alejandro VALVERDE\", \"Joaquin RODRIGUEZ\", \"Chris FROOME\", \n             \"Vincenzo NIBALI\", \"Alberto CONTADOR\", \"Rui Alberto COSTA\", \"Nairo QUINTANA\", \n             \"Fabian CANCELLARA\", \"Philippe GILBERT\", \"Bauke MOLLEMA\", \"Mark CAVENDISH\", \n             \"Greg VAN AVERMAET\", \"Edvald BOASSON HAGEN\", \"John DEGENKOLB\", \n             \"Sylvain CHAVANEL\", \"Andre GREIPEL\", \"Sergio HENAO\", \"Daniel MORENO\", \n             \"Richie PORTE\", \"Bradley WIGGINS\"),\n  \"2015\" = c(\"Alejandro VALVERDE\", \"Peter SAGAN\", \"Alberto CONTADOR\", \"Vincenzo NIBALI\", \n             \"Chris FROOME\", \"Joaquin RODRIGUEZ\", \"John DEGENKOLB\", \"Alexander KRISTOFF\", \n             \"Michal KWIATKOWSKI\", \"Nairo QUINTANA\", \"Rui Alberto COSTA\", \n             \"Fabian CANCELLARA\", \"Philippe GILBERT\", \"Greg VAN AVERMAET\", \n             \"Bauke MOLLEMA\", \"Simon GERRANS\", \"Romain BARDET\", \"Nacer BOUHANNI\", \n             \"Arnaud DEMARE\", \"Daniel MARTIN\", \"Daniel MORENO\", \"Tejay VAN GARDEREN\"),\n  \"2016\" = c(\"Alejandro VALVERDE\", \"Alexander KRISTOFF\", \"Peter SAGAN\", \n             \"Chris FROOME\", \"Alberto CONTADOR\", \"Vincenzo NIBALI\", \"Nairo QUINTANA\", \n             \"Greg VAN AVERMAET\", \"Joaquin RODRIGUEZ\", \"John DEGENKOLB\", \"Fabio ARU\", \n             \"Michal KWIATKOWSKI\", \"Thibaut PINOT\", \"Rui Alberto COSTA\", \"Philippe GILBERT\", \n             \"Romain BARDET\", \"Tom DUMOULIN\", \"Tony GALLOPIN\", \"Michael MATTHEWS\", \n             \"Andre GREIPEL\", \"Bauke MOLLEMA\", \"Daniel MORENO\"),\n  \"2017\" = c(\"Peter SAGAN\", \"Alejandro VALVERDE\", \"Alexander KRISTOFF\", \n             \"Greg VAN AVERMAET\", \"Chris FROOME\", \"Nairo QUINTANA\", \"Alberto CONTADOR\", \n             \"Romain BARDET\", \"Vincenzo NIBALI\", \"Michael MATTHEWS\", \"Thibaut PINOT\", \n             \"Julian ALAPHILIPPE\", \"Fabio ARU\", \"Jhoan Esteban CHAVES\", \"Rui Alberto COSTA\", \n             \"Tom DUMOULIN\", \"Giacomo NIZZOLO\", \"Nacer BOUHANNI\", \"John DEGENKOLB\", \n             \"Bauke MOLLEMA\", \"Diego ULISSI\", \"Edvald BOASSON HAGEN\", \"Richie PORTE\"),\n  \"2018\" = c(\"Peter SAGAN\", \"Greg VAN AVERMAET\", \"Chris FROOME\", \"Alejandro VALVERDE\", \n             \"Alexander KRISTOFF\", \"Nairo QUINTANA\", \"Tom DUMOULIN\", \"Michael MATTHEWS\", \n             \"Vincenzo NIBALI\", \"Thibaut PINOT\", \"Romain BARDET\", \"Michal KWIATKOWSKI\", \n             \"Julian ALAPHILIPPE\", \"Fabio ARU\", \"Daniel MARTIN\", \"Nacer BOUHANNI\", \n             \"Arnaud DEMARE\", \"Philippe GILBERT\", \"Rigoberto URAN\", \"Sonny COLBRELLI\", \n             \"Andre GREIPEL\", \"Richie PORTE\", \"Diego ULISSI\", \"Ilnur ZAKARIN\"),\n  \"2019\" = c(\"Peter SAGAN\", \"Alejandro VALVERDE\", \"Greg VAN AVERMAET\", \"Julian ALAPHILIPPE\", \n             \"Chris FROOME\", \"Tom DUMOULIN\", \"Elia VIVIANI\", \"Alexander KRISTOFF\", \n             \"Michael MATTHEWS\", \"Thibaut PINOT\", \"Simon YATES\", \"Romain BARDET\", \n             \"Nairo QUINTANA\", \"Primoz ROGLIC\", \"Arnaud DEMARE\", \"Michal KWIATKOWSKI\", \n             \"Geraint THOMAS\", \"Tim WELLENS\", \"Jasper STUYVEN\", \"Sonny COLBRELLI\", \n             \"Ion IZAGIRRE\", \"Miguel Angel LOPEZ\", \"Philippe GILBERT\", \"Daniel MARTIN\", \n             \"Vincenzo NIBALI\"),\n  \"2020\" = c(\"Julian ALAPHILIPPE\", \"Primoz ROGLIC\", \"Alejandro VALVERDE\",\n             \"Peter SAGAN\", \"Greg VAN AVERMAET\", \"Egan BERNAL\", \"Jakob FUGLSANG\", \"Elia VIVIANI\",      \n             \"Alexander KRISTOFF\",\"Matteo TRENTIN\",    \n             \"Thibaut PINOT\", \"Pascal ACKERMANN\", \"Michael MATTHEWS\",  \n             \"Oliver NAESEN\", \"Tim WELLENS\", \"Tom DUMOULIN\", \"Miguel Angel LOPEZ\", \"Bauke MOLLEMA\",     \n             \"Mathieu VAN DER POEL\", \"Adam YATES\"),\n  \"2021\" = c(\"Primoz ROGLIC\", \"Julian ALAPHILIPPE\", \"Tadej POGACAR\", \"Wout VAN AERT\",\n             \"Mathieu VAN DER POEL\", \"Egan BERNAL\", \"Remco EVENEPOEL\", \"Peter SAGAN\"),\n  \"2022\" = c(\"Tadej POGACAR\", \"Wout VAN AERT\", \"Primoz ROGLIC\", \"Julian ALAPHILIPPE\",\n             \"Mathieu VAN DER POEL\", \"Egan BERNAL\", \"Sonny COLBRELLI\", \"Joao ALMEIDA\", \"Remco EVENEPOEL\", \"Adam YATES\")\n)\n\nmax_top_league <- c(`2013` = 93, `2014` = 93, `2015` = 93, `2016` = 93, `2017` = 93, \n                    `2018` = 93, `2019` = 93, `2020` = 225, `2021` = 65, `2022` = 63\n)\n\n\n# transform top-league data into a df\nmap2_vec(top_league, names(top_league),\n         ~list(mutate(tibble(Name = .x), Year = .y, TopLeague = TRUE))) |> \n  bind_rows() |> \n  right_join(data_riders, by = c(\"Name\", \"Year\")) |> \n  replace_na(list(TopLeague = FALSE)) |> \n  arrange(Year, desc(Cost)) |> \n  mutate(Ratio = round(Points/Cost, 2L)) -> data_riders\n\n\nWe now have a single data.frame will all the scores for every rider over the 2013 to 2022 period, and the information about the top ligue and the constraints which apply to it.\n\n\n\n\n\n\n\n\n\nHuman performances\nSimilarly, we can retrieve all the results for any player over the same period. Let’s display the podium for each year.\n\n\nBind human data for each year altogether\nmap(2013:2022, read_team_scores) |>\n  setNames(2013:2022) |> \n  bind_rows(.id = \"Year\") |> \n  group_by(Year) |> \n  slice_max(Points, n = 3) |> \n  mutate(Ratio = round(Points/225, 2L))-> data_teams\n\n\nWe can observe several changes in the performance scores. Several phenomenom are at stake here. Firstly, rules have changed in the way the game was played. There were more riders in the top league category and even if the budget allowed was more important, it had an impact on the way teams were made. Secondly, 2020 was different because of covid. Thirdly, some riders have become easily predictable lastly, whith Tadej Pogacar or Wout Van Aert (and a few others) being extremly dominant. It doesn’t mean that they will necessarily be in the top teams, but they are somehow safe picks as they will win a lot of rewarding races all year long.\n\n\nCode\nlibrary(ggplot2)\nlibrary(emojifont)\n\ntmp_plt <- data_teams |> \n  group_by(Year) |> \n  arrange(desc(Points)) |> \n  mutate(Rank = fontawesome('fa-trophy'),\n         color = c(\"#FFD700\", \"#C0C0C0\", \"#CD7F32\"),\n         Year = as.numeric(Year)) |> \n  ungroup()\n\nggplot(tmp_plt, aes(x = Year, y = Points, label = Rank, color = color)) +\n  geom_text(family='fontawesome-webfont', size=12) +\n  scale_color_manual(values=c(\"#C0C0C0\", \"#CD7F32\", \"#FFD700\")) +\n  scale_x_continuous(breaks = 2013:2022) +\n  theme(legend.position='none',\n        plot.title = element_text(size = 30),\n        plot.subtitle = element_text(size = 20),\n        axis.text.y = element_text(size = 20),\n        axis.title.y = element_text(size = 20),\n        axis.title.x = element_text(size = 20),\n        axis.text.x = element_text(size = 20)\n  ) +\n  ggtitle(\"Points for podium from 2013 to 2022\")\n\n\n\n\n\n\n\n\n\n\n\nBest team: Oracle\nNow, let’s try to find what could have been the best team, the one we would have chosen if we were an oracle. We will use the year 2022 as the first example. One way to solve this problem is by using linear programming. The idea is to represent the problem as a value to be maximize will respecting the different constraints. One way to do it in R is to use the lpSolve package which is an interface to the free and open source solver lpSolve.\nWe can now specify our LP problem. We want to maximize the value of our team, i.e:\n\\[\n\\max \\sum_{i=1}^N x_i\\cdot\\mathrm{Points}_i\n\\]\nwhere \\(N\\) is the number of riders in the game, \\(x_i\\) a binary variable (1 or 0) wether rider \\(i\\) is included in the team or not, and \\(\\mathrm{Points}_i\\) the total of points for rider \\(i\\) at the end of the season. We have to respect the following contraints :\n\\[\ns.t. \\sum_i x_i \\leq 35\n\\]\n\\[\n\\sum_i x_i \\geq 30\n\\]\n\\[\n\\sum_i x_i\\cdot\\mathrm{Cost}_i \\leq 225\n\\]\nand\n\\[\n\\sum_i x_i\\cdot\\mathrm{TopLeague}_i\\cdot\\mathrm{Cost}_i \\leq \\mathrm{MaxTopLeague}\n\\]\nwhere \\(Cost_i\\) is the cost of the rider \\(i\\), \\(TopLeague_i\\) indicates if the rider \\(i\\) is in the top league category and MaxTopLeague is a constant value for every year.\nNow, we can specify our LP problem. Let’s solve the problem for the whole period now. Let’s build a maximize_score function to easily compute the scores for each year.\n\n\nFunction to find the optimal team\n#' @param data A df with columns Name, Cost, Points, TopLeague\n#' @param max_top_league Maximum budget for top league riders\n#' @return A dataframe, with one row corresponding to one rider from the best team.\nmaximize_score <- function(data, max_top_league) {\n  # define obj function\n  # this corresponds to maximizing the sum of points \n  f.obj <- data[[\"Points\"]]\n  \n  N <- nrow(data)\n  # define constraints\n  # 1st and 2nd constraints concern all x_i\n  # 3rd constraints is for cost constraint\n  # 4th is about cost constraint for top league\n  f.con <- matrix(c(rep(1, N),\n                    rep(1, N),\n                    data[[\"Cost\"]],\n                    data[[\"TopLeague\"]]),\n                  nrow = 4, byrow = TRUE)\n  \n  # Inequality signs for constraints\n  f.dir <- c(\"<=\",\n             \">=\",\n             \"<=\",\n             \"<=\")\n  \n  # Threshold values for constraints (rhs)\n  f.rhs <- c(35,\n             30,\n             225,\n             max_top_league)\n  \n  # Problem definition\n  linprog <- lp(direction = \"max\",\n                f.obj,\n                f.con,\n                f.dir, \n                f.rhs,\n                binary.vec = 1:length(f.obj))\n  \n  # We return as a result the dataframe's rows corresponding to\n  # riders in the best team possible\n  result <- data[as.logical(linprog$solution), ]\n  return(list(result))\n}\n\n\nAnd let’s iterate over the years.\n\n\nIteration on 2013 to 2022 period\n# we use purrr::map2_vec() to iterate simultaneously on the data\n# and on the max value for top league\ndata_nested <- data_riders |> nest(.by = Year)\nresults_all_years <- map2_vec(\n  data_nested$data, max_top_league,\n  .f = maximize_score) |> \n  setNames(2013:2022)\n\n\n\n\nBest teams for 2013 to 2022 period - Table display\ndf_results <- bind_rows(results_all_years, .id = \"Year\") |> \n  rename(Top = TopLeague)\nshared_results <- SharedData$new(df_results)\nbscols(widths = c(2L, 10L),\n       filter_select(id = \"year\", \"Year\", shared_results, ~Year, multiple = FALSE),\n       reactable(shared_results, \n                 pagination = TRUE,\n                 pageSizeOptions = 35,\n                 defaultPageSize = 35,\n                 compact = TRUE,\n                 defaultColDef = colDef(\n                   vAlign = \"center\",\n                   headerVAlign = \"bottom\",\n                   class = \"cell\",\n                   headerClass = \"header\"\n                 ),\n                 columns = list(\n                   Year = colDef(width = 75),\n                   Name = colDef(width = 200),\n                   Top = topleague_column(),\n                   Team = colDef(width = 60),\n                   Cost = colDef(width = 60)\n                 ))\n)\n\n\n\n\n\n\n\nYear\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s compare how well human did compared to the best teams.\n\n\nHuman vs best team\ndata_teams |> \n  group_by(Year) |> \n  mutate(Rank = c(\"First\", \"Second\", \"Third\")) |> \n  select(Year, Rank, Points) |> \n  pivot_wider(names_from = Rank, values_from = Points) -> tmp\n\ndf_results |> \n  group_by(Year) |> \n  summarize(Score = sum(Points)) |> \n  left_join(tmp, by = \"Year\") |> \n  mutate(`Difference with best` = Score - First) |> \n  reactable()\n\n\n\n\n\n\n\n\n\nConclusion\nWhoever plays that kind of game is always full of regrets. Why didn’t I pick this rider instead of this one? Why did I trust him, again? The good news is, there are a lot of possible teams better than the best human player, so hope is still there for you !"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog ! ‘R avancé & introduction à Git’",
    "section": "",
    "text": "I’ve been pleased to teach a R course at the university of Nantes this winter untitled ‘R avancé & introduction à Git’. You will be able to find the course materials there. The lesson is in French. It was a good exercise to build the materials from scratch, with the help of the awesome resources from posit team, such as R advanced or R packages. I got heavily inspired by Andrew Heiss teaching material to organize the class content online. Hopefully, I’ll have time to improve and personalize the styling for next year.\nThe final report goal was to build a personal blogging website, using CI-CD, github and reproducible science tools from the R environment to write articles efficiently. I had to do it myself, so here I am."
  }
]